/* tag generated by ksana-indexer/rawtags.js */
var injectTag=function(content,tagoffsets,tags,start,end) {
	var n=start;
	var offset=tagoffsets[n];
	var out="";
	for (var i=0;i<content.length;i++) {
		if (offset===i && n<end) {
			out+="<"+tags[n]+">";
			offset=tagoffsets[++n];
			if (n==end) { //no more tag, copy rest text
				out+=content.substr(i);
				break;
			}			
		}
		out+=content[i];
	}

	return out;
}


var dump=function(filecontents,segnames,segoffsets,rawtag) {
	var now=0,n=0;
	var output="";
	for (var i=0;i<filecontents.length;i++) {
		for (var j=0;j<filecontents[i].length;j++) {

			var content=filecontents[i][j];
			if (rawtag.seg[n]==now) {
				var start=rawtag.ends[n-1]||0;
				var end=rawtag.ends[n];
				content=injectTag(content,rawtag.offset,rawtag.tag,start,end);
				n++;
			}
			content=content.replace(/\n/g,"\\n").replace(/\t/g,"\\t");
			output+=segnames[now]+","+content+"\n";
			now++;
		}
	}
	return output;
}

var exportAsCSV=function(cb) {
  this.get([["filecontents"],["segnames"],["segoffsets"],["rawtag"]],{recursive:true},function(data){
  	var buf=dump(data[0],data[1],data[2],data[3]);
  	cb(buf);
  })
}

module.exports={CSV:exportAsCSV};